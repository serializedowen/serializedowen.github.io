{"version":3,"sources":["webpack:///./src/templates/post.js"],"names":["Title","styled","h1","PostContent","div","Post","componentDidMount","componentWillUnmount","this","editor","render","props","pageContext","slug","prev","next","postNode","data","markdownRemark","post","frontmatter","postPath","postSEO","title","config","siteTitle","to","id","date","timeToRead","kebabCase","category","className","dangerouslySetInnerHTML","__html","html","Component","defaultProps","PropTypes","shape","postQuery"],"mappings":"8VAoBMA,G,oBAAQC,IAAOC,GAAV,8DAAGD,CAAH,0BAILE,EAAcF,IAAOG,IAAV,oEAAGH,CAAH,mCAKXI,E,0GACJC,kBAAA,a,EASAC,qBAAA,WACEC,KAAKC,OAAS,M,EAGhBC,OAAA,WAAU,IAAD,EAIHF,KAAKG,MAJF,IAELC,YAAeC,EAFV,EAEUA,KAAMC,EAFhB,EAEgBA,KAAMC,EAFtB,EAEsBA,KACHC,EAHnB,EAGLC,KAAQC,eAEJC,EAAOH,EAASI,YACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,SAAUR,EAAMG,SAAUA,EAAUM,SAAO,IAChD,kBAAC,IAAD,CAAQC,MAAUJ,EAAKI,MAAV,MAAqBC,IAAOC,YACzC,kBAAC,IAAD,KACE,kBAAC,OAAD,CAAMC,GAAG,KAAKF,IAAOC,YAEvB,kBAAC,IAAD,KACE,kBAACzB,EAAD,KAAQmB,EAAKI,OACb,yBAAKI,GAAG,mBACR,kBAAC,IAAD,KACGR,EAAKS,KADR,MACuBZ,EAASa,WADhC,iBACgE,IAC9D,kBAAC,OAAD,CAAMH,GAAE,eAAiBI,IAAUX,EAAKY,WACrCZ,EAAKY,WAGV,kBAAC5B,EAAD,CACE6B,UAAU,WACVC,wBAAyB,CAAEC,OAAQlB,EAASmB,QAE9C,kBAAC,IAAD,CAAUrB,KAAMA,EAAMC,KAAMA,O,GAxCnBqB,aA+CJ/B,YAafA,EAAKgC,aAAe,CAClBzB,YAAa0B,IAAUC,MAAM,CAC3BxB,KAAM,KACND,KAAM,QAIH,IAAM0B,EAAS","file":"component---src-templates-post-js-0c2c33a213c067e56df6.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { Link, graphql } from 'gatsby'\nimport styled from 'styled-components'\nimport kebabCase from 'lodash/kebabCase'\nimport {\n  Layout,\n  Wrapper,\n  Header,\n  Subline,\n  SEO,\n  PrevNext,\n  Content\n} from 'components'\nimport config from '../../config/SiteConfig'\nimport '../utils/medium-editor.css'\nimport 'medium-editor/dist/css/medium-editor.min.css'\n// import '../utils/prismjs-theme.css'\n\nconst Title = styled.h1`\n  margin-bottom: 1rem;\n`\n\nconst PostContent = styled.div`\n  outline: none;\n  margin-top: 4rem;\n`\n\nclass Post extends Component {\n  componentDidMount() {\n    // using import cause failure at production build\n    /* eslint global-require:0 */\n    // const MediumEditor = require('medium-editor')\n    // this.editor = new MediumEditor('.editable', {\n    //   elementsContainer: document.querySelector('#medium-toolbar')\n    // })\n  }\n\n  componentWillUnmount() {\n    this.editor = null\n  }\n\n  render() {\n    const {\n      pageContext: { slug, prev, next },\n      data: { markdownRemark: postNode }\n    } = this.props\n    const post = postNode.frontmatter\n    return (\n      <Wrapper>\n        <SEO postPath={slug} postNode={postNode} postSEO />\n        <Helmet title={`${post.title} | ${config.siteTitle}`} />\n        <Header>\n          <Link to=\"/\">{config.siteTitle}</Link>\n        </Header>\n        <Content>\n          <Title>{post.title}</Title>\n          <div id=\"medium-toolbar\" />\n          <Subline>\n            {post.date} &mdash; {postNode.timeToRead} Min Read &mdash; In{' '}\n            <Link to={`/categories/${kebabCase(post.category)}`}>\n              {post.category}\n            </Link>\n          </Subline>\n          <PostContent\n            className=\"editable\"\n            dangerouslySetInnerHTML={{ __html: postNode.html }}\n          />\n          <PrevNext prev={prev} next={next} />\n        </Content>\n      </Wrapper>\n    )\n  }\n}\n\nexport default Post\n\nPost.propTypes = {\n  pageContext: PropTypes.shape({\n    slug: PropTypes.string.isRequired,\n    next: PropTypes.object,\n    prev: PropTypes.object\n  }),\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.object.isRequired\n  }).isRequired\n}\n\nPost.defaultProps = {\n  pageContext: PropTypes.shape({\n    next: null,\n    prev: null\n  })\n}\n\nexport const postQuery = graphql`\n  query postBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      excerpt\n      frontmatter {\n        title\n        date(formatString: \"DD.MM.YYYY\")\n        category\n      }\n      timeToRead\n    }\n  }\n`\n"],"sourceRoot":""}