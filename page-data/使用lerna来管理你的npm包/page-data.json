{"componentChunkName":"component---src-templates-post-js","path":"/使用lerna来管理你的npm包","result":{"data":{"markdownRemark":{"html":"<h3 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h3>\n<p>相信很多同学都遇到过一个问题：随着 js 项目越来越大，许多公用的功能与组件往往会被拆分，打包，发布成为单独的 npm 包来使用，而在此过程中，往往会遇到不少问题：</p>\n<ol>\n<li>如需修改拆分的包往往会需要<code class=\"language-text\">npm link</code>或者<code class=\"language-text\">git submodule</code>，适用性和观感很差</li>\n<li><code class=\"language-text\">commit log</code>分散在各个仓库中，问题溯源成本大大提升</li>\n<li>包发布需要去各个仓库操作，相当繁琐</li>\n<li>最常用的包改动后会影响大量依赖此包的项目，（ps 改动 package.json 等），有时候还有会遗漏</li>\n</ol>\n<p>这时候，聪明的同学就会想到，我们把所有的代码全部移到一个仓库里去不就好了吗？是的，程序员的力量是无穷的，业界已经为我们提供了相当成熟的解决方案，那就是用: <a href=\"https://lerna.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lerna</a> 来管理你的仓库</p>\n<blockquote>\n<p>有阅读源码习惯的同学可能已经对 lerna 不再陌生，例如 react，vue 等等大型项目都已经在开发环境中使用 lerna 来管理 npm 包</p>\n</blockquote>\n<br/>\n<h3 id=\"什么是-lerna\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-lerna\" aria-label=\"什么是 lerna permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是 lerna</h3>\n<p>Lerna 是一种工具，可以优化使用 git 和 npm 管理多包仓库的工作流程。</p>\n<blockquote>\n<p>将大型代码库分成单独的独立版本化的软件包对于代码共享非常有用。但是，跨仓库进行更改很麻烦且难以跟踪，并且跨仓库的测试变得非常复杂。为了解决这些（以及许多其他）问题，某些项目会将其代码库组织到多包存储库中。Babel，React，Angular，Ember，Meteor，Jest 等项目以及许多其他项目都在单个仓库中开发了所有软件包。\n<br/></p>\n</blockquote>\n<h3 id=\"安装\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E8%A3%85\" aria-label=\"安装 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装</h3>\n<p>首先全局安装 lerna</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --global lerna</code></pre></div>\n<br/>\n<h3 id=\"初始化\" style=\"position:relative;\"><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96\" aria-label=\"初始化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>初始化</h3>\n<p>接下来新建一个 git 仓库</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir my-new-monorepo &amp;&amp; cd my-new-monorepo</code></pre></div>\n<p>初始化 lerna 和 git</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lerna init\ngit init</code></pre></div>\n<p>进行完这个步骤后，仓库应该大致长这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">my-new-monorepo/\n  package.json\n  lerna.json\n  packages/\n    package-1/\n      package.json\n    package-2/\n      package.json</code></pre></div>\n<p>接下来，就是见证奇迹的时刻，你只需要根据你的每个子项目分别运行</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lerna import ~/path/to/your/subproject</code></pre></div>\n<p>剩下的都由 lerna 来为你搞定！包括迁移代码，迁移 git 提交日志，将他们移动到 packages/目录下，并修改<code class=\"language-text\">lerna.json</code></p>\n<p>仓库添加完毕之后运行 <code class=\"language-text\">lerna bootstrap</code> 来安装项目依赖\n<br/></p>\n<h3 id=\"lerna-的命令\" style=\"position:relative;\"><a href=\"#lerna-%E7%9A%84%E5%91%BD%E4%BB%A4\" aria-label=\"lerna 的命令 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lerna 的命令</h3>\n<ul>\n<li><code class=\"language-text\">lerna init</code>: 如其名</li>\n<li><code class=\"language-text\">lerna bootstrap</code>: 初始化仓库中的所有 package，包括安装依赖，运行 preinstall，postinstall script 等等</li>\n<li><code class=\"language-text\">lerna import</code>： 导入一个本地存在的仓库成为一个新的 package</li>\n<li><code class=\"language-text\">lerna add [package]</code>：添加所有子项目都可用的共同依赖</li>\n<li>\n<p><code class=\"language-text\">lerna publish</code>：打包发布所有的 package</p>\n<ul>\n<li>选项：<code class=\"language-text\">--npm-tag [tagname]</code> 用指定的 npm tag 发布包，默认为 latest</li>\n<li><code class=\"language-text\">--canary 或 -c</code> 发布一个 canary(测试)版本</li>\n<li><code class=\"language-text\">--skip-git</code> 不执行任何 git 命令</li>\n<li><code class=\"language-text\">--force-publish [packages]</code> 强制发布数组中列举的 package，用逗号分割，或者<code class=\"language-text\">*</code>来发布所有包</li>\n</ul>\n</li>\n<li><code class=\"language-text\">lerna changed</code> 查看和上次发布相比哪些 package 产生了改动</li>\n<li><code class=\"language-text\">lerna ls</code> 列举该仓库中所有公开可见的 package</li>\n<li><code class=\"language-text\">lerna run [script]</code> 等同于在所有 package 中运行<code class=\"language-text\">npm run [script]</code>，前提是该 script 存在\n<br/></li>\n</ul>\n<h3 id=\"lernajson-配置\" style=\"position:relative;\"><a href=\"#lernajson-%E9%85%8D%E7%BD%AE\" aria-label=\"lernajson 配置 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lerna.json 配置</h3>\n<ul>\n<li>version: 当前 npm 包的版本</li>\n<li>npmClient: 默认是 \"npm\".</li>\n<li>command.publish.ignoreChanges: 在运行<code class=\"language-text\">lerna changed</code>和<code class=\"language-text\">lerna publish</code>时会被忽略的 glob 匹配项，用来防止因为修改例如<code class=\"language-text\">README.md</code>后生成一个新版本</li>\n<li>command.publish.message: 一个在发布新版本时会作为前缀添加到 commit 消息的配置项</li>\n<li>command.publish.registry: 指定发布到的 npm 源</li>\n<li>command.bootstrap.ignore: 一个记录 bootstrap 过程中哪些 package 会被忽略的 glob 匹配项数组</li>\n<li>command.bootstrap.npmClientArgs: 会作为参数传给 npm 客户端, 例如<code class=\"language-text\">--no-package-lock</code></li>\n<li>packages: lerna 用来标注 package 的 glob 匹配项数组， 默认为<code class=\"language-text\">packages/*</code>\n<br/></li>\n</ul>\n<h3 id=\"懒癌患者的救星\" style=\"position:relative;\"><a href=\"#%E6%87%92%E7%99%8C%E6%82%A3%E8%80%85%E7%9A%84%E6%95%91%E6%98%9F\" aria-label=\"懒癌患者的救星 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>懒癌患者的救星</h3>\n<p>如果你觉得记得这么多的配置项和命令实在太难了，<a href=\"https://github.com/webuniverseio/lerna-wizard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lerna-wizard</a>就是你的救星。且看 demo：</p>\n<p><img src=\"/82092142a21998ac31e36e7e680057bb/demo.gif\"></p>\n<br/>\n<h3 id=\"潜在问题缺陷\" style=\"position:relative;\"><a href=\"#%E6%BD%9C%E5%9C%A8%E9%97%AE%E9%A2%98%E7%BC%BA%E9%99%B7\" aria-label=\"潜在问题缺陷 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>潜在问题/缺陷</h3>\n<ul>\n<li>为项目添加了一层额外的复杂度，开发者需要了解 monorepo 的概念和 lerna 的使用</li>\n<li>没有一个可用的 dry-run 选项，无法在不往 npm 发布包的情况下测试整个 publish 流程</li>\n<li>定义不同 npm 包之间公用的生命周期脚本比较困难</li>\n<li>仅改动一小部分代码也需要克隆整个 monorepo 和安装所有依赖</li>\n</ul>","excerpt":"前言 相信很多同学都遇到过一个问题：随着 js 项目越来越大，许多公用的功能与组件往往会被拆分，打包，发布成为单独的 npm…","frontmatter":{"title":"使用lerna来管理你的npm包","date":"09.12.2020","category":"JavaScript"},"timeToRead":4}},"pageContext":{"slug":"/使用lerna来管理你的npm包","prev":{"fileAbsolutePath":"/Users/owenwang/Documents/javascript/serializedowen.github.io/blog/docker/docker-compose入门.md","fields":{"slug":"/docker-compose入门"},"sourceType":"posts","frontmatter":{"title":"docker-compose入门","category":"Docker"}},"next":{"fileAbsolutePath":"/Users/owenwang/Documents/javascript/serializedowen.github.io/blog/typescript-magic.md","fields":{"slug":"/浅入浅出-type-script-泛型与类型黑魔法"},"sourceType":"posts","frontmatter":{"title":"浅入浅出 TypeScript 泛型与类型黑魔法","category":"TypeScript"}}}},"staticQueryHashes":["1124436713","4274079806"]}