{"componentChunkName":"component---src-templates-post-js","path":"/docker-compose入门","result":{"data":{"markdownRemark":{"html":"<h3 id=\"什么是-docker-compose\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-docker-compose\" aria-label=\"什么是 docker compose permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是 docker-compose</h3>\n<p>通俗的说，docker-compose 正如其名，是将你的多个 docker 容器服务整合起来的命令行工具。举个例子，假设你有一个 MySQL 实例和一个 Node.js 实例分别部署在两个容器中，仅需一个<code class=\"language-text\">docker-compose.yml</code>文件，docker-compose 就可以为你完成从打包到运行的所有步骤，并如果你还在苦恼手动执行各种<code class=\"language-text\">docker run []</code> 命令，这份指南可能能够帮上你。</p>\n<h4 id=\"安装\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E8%A3%85\" aria-label=\"安装 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装</h4>\n<blockquote>\n<p>如果你是在本地开发环境中使用 docker-compose，你不需要安装任何的依赖项，Docker for Windows 和 Docker for Mac 都已经内置了 docker-compose 的包</p>\n</blockquote>\n<p>在 Linux based 服务器上安装:</p>\n<ul>\n<li>在 terminal 中运行\n<code class=\"language-text\">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m`-o /usr/local/bin/docker-compose</code> 下载 docker-compose 的安装脚本</li>\n<li>为脚本添加执行权限<code class=\"language-text\">sudo chmod +x /usr/local/bin/docker-compose</code></li>\n<li>执行脚本<code class=\"language-text\">sh /usr/local/bin/docker-compose</code></li>\n</ul>\n<h4 id=\"容器编排\" style=\"position:relative;\"><a href=\"#%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92\" aria-label=\"容器编排 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>容器编排</h4>\n<p>docker-compose 使用目录下的<code class=\"language-text\">docker-compose.yml</code> 作为项目的配置文件， 以上述我们举的 MySQL 和 Node.js 应用的例子\n<code class=\"language-text\">docker-compose.yml</code> 文件应该具有类似以下的结构:</p>\n<blockquote>\n<p>你可以在<a href=\"https://github.com/serializedowen/docker-compose-tutorial\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a>上克隆和运行下文中的示例</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mysql</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'3306:3306'</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'123456'</span>\n\n  <span class=\"token key atrule\">webapp</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> webapp\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'mysql'</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">NODE_ENV</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'production'</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'80:8080'</span></code></pre></div>\n<p>看不懂是很正常的，下面我们来一条一条详细剖析每个配置项是什么意思</p>\n<ul>\n<li><code class=\"language-text\">services</code> 表示该集合下包含的所有服务，在这个例子中我们有 mysql 和 webapp 两个服务</li>\n<li><code class=\"language-text\">image</code> 表示从官方维护的 mysql 镜像构建我们的容器</li>\n<li><code class=\"language-text\">port</code> 表示将 docker 宿主机的 3306 端口映射 docker 容器的 3306 端口上，这样我们就能在宿主上通过 localhost:3306 连接到我们的 mysql 数据库</li>\n<li>\n<p>webapp</p>\n<ul>\n<li><code class=\"language-text\">build</code>: 表示 docker 从哪个文件夹开始构建镜像</li>\n<li><code class=\"language-text\">container_name</code>: 容器名字</li>\n<li><code class=\"language-text\">restart</code>: 表示 Dockerfile 中的 CMD 命令返回任何非 0 的状态时都将重启容器</li>\n<li><code class=\"language-text\">depends_on</code>: 容器的依赖。在这里，webapp 容器会保证在 mysql 容器之后启动。</li>\n<li><code class=\"language-text\">environment</code>: 需要注入的 unix 环境变量，供容器使用。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意：services 下的所有服务会共享同一个 docker network，这意味着你可以再 webapp 容器中通过 mysql:3306 访问到 mysql 服务，在 mysql 容器中通过 webapp:8080 访问到我们的 express 服务端， 更加详细的 networks 配置请查阅 <a href=\"https://docs.docker.com/compose/networking/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Networking in Compose</a></p>\n</blockquote>\n<blockquote>\n<p>depends_on 仅仅保证容器的执行顺序，而不保证你的应用已经在可用的状态（不管可用的状态对于你的应用意味着什么）。docker 这样设计是经过了周密考虑的：为了保证应用的健壮性，你应该自行定义在容器之间服务连接错误时候的重试/重启机制。</p>\n</blockquote>\n<ol>\n<li>接下来，你仅需要在项目目录下运行<code class=\"language-text\">docker-compose up</code> 即可看到 docker 开始构建镜像并启动服务</li>\n<li>如果需要以后台守护进程模式启动 使用<code class=\"language-text\">docker-compose up -d</code></li>\n<li>用<code class=\"language-text\">docker-compose down</code>来停止运行中的容器</li>\n<li><code class=\"language-text\">docker-compose build</code>重新构建容器</li>\n</ol>\n<p>运行成功后，访问<a href=\"http://localhost\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost</a> 可以看到 express 服务器的 hello world 示例，<a href=\"http://localhost/mysql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost/mysql</a> 可以检查 mysql 连接状态</p>\n<p>docker 官网提供的其他示例：</p>\n<ul>\n<li><a href=\"https://docs.docker.com/compose/wordpress/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wordpress</a></li>\n<li><a href=\"https://docs.docker.com/compose/rails/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rails</a></li>\n<li><a href=\"https://docs.docker.com/compose/django/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Django</a></li>\n</ul>\n<p>完整的配置项文档请移步<a href=\"https://docs.docker.com/compose/compose-file\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docker 官网文档</a></p>\n<p><a href=\"serializedowen.com/docker-compose%E5%85%A5%E9%97%A8\">原文链接</a></p>","excerpt":"什么是 docker-compose 通俗的说，docker-compose 正如其名，是将你的多个 docker 容器服务整合起来的命令行工具。举个例子，假设你有一个 MySQL 实例和一个 Node.js 实例分别部署在两个容器中，仅需一个文件，docker-compose…","frontmatter":{"title":"docker-compose入门","date":"21.10.2020","category":"Docker"},"timeToRead":3}},"pageContext":{"slug":"/docker-compose入门","prev":{"fileAbsolutePath":"/Users/owenwang/Documents/javascript/serializedowen.github.io/blog/nginx/location.md","fields":{"slug":"/location-配置详解"},"sourceType":"posts","frontmatter":{"title":"Location 配置详解","category":"Nginx"}},"next":{"fileAbsolutePath":"/Users/owenwang/Documents/javascript/serializedowen.github.io/blog/lerna/lerna.md","fields":{"slug":"/使用lerna来管理你的npm包"},"sourceType":"posts","frontmatter":{"title":"使用lerna来管理你的npm包","category":"JavaScript"}}}},"staticQueryHashes":["1124436713","4274079806"]}