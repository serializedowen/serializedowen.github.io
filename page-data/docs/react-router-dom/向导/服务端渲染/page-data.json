{"componentChunkName":"component---src-templates-doc-js","path":"/docs/react-router-dom/向导/服务端渲染","result":{"data":{"markdownRemark":{"html":"<h3 id=\"服务端渲染\" style=\"position:relative;\"><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93\" aria-label=\"服务端渲染 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>服务端渲染</h3>\n<h4 id=\"基础\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E7%A1%80\" aria-label=\"基础 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基础</h4>\n<p>在服务端渲染路由会和客户端渲染有略微的区别，（因为服务端渲染没有状态）。基本思想是，我们将路由包裹到无状态的<code class=\"language-text\">&lt;StaticRouter&gt;</code>中，而不是包含状态的<code class=\"language-text\">&lt;BrowserRouter&gt;</code>。 我们从服务端请求中获得 url 参数并将它传给<code class=\"language-text\">&lt;StaticRouter&gt;</code>去做路径匹配。下一步，我们会讨论 context 属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// client</span>\n<span class=\"token operator\">&lt;</span>BrowserRouter<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>App<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BrowserRouter<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// server (not the complete story)</span>\n<span class=\"token operator\">&lt;</span>StaticRouter\n  location<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span>\n  context<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>App<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StaticRouter<span class=\"token operator\">></span></code></pre></div>\n<p>当你在客户端渲染<code class=\"language-text\">&lt;Redirect&gt;</code>组件时，react-router 会往 history API 写入新的记录并渲染新的页面。而在服务端渲染场景中，我们无法控制 web 应用的状态。作为替代，我们用 context 属性来获得实际渲染的结果。如果我们能获取到 context.url，那代表应用被重定向了。接下来我们可以发起相应的重定向请求</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> markup <span class=\"token operator\">=</span> ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>StaticRouter location<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span> context<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StaticRouter<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Somewhere a `&lt;Redirect>` was rendered</span>\n  <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token number\">301</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// we're good, send the response</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"添加自定义的-context-信息\" style=\"position:relative;\"><a href=\"#%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-context-%E4%BF%A1%E6%81%AF\" aria-label=\"添加自定义的 context 信息 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>添加自定义的 context 信息</h4>\n<p>现在，路由器仅仅能控制 context.url。但实际场景中，你可能会想让部分重定向请求使用 301，而其他的使用 302，或者，你可能想在某些路径匹配中渲染 404 页面，亦或 401 如果用户没有权限。实际上，你拥有整个 context 对象的权限，你可以随意的改写它。下列示例区分了 301，302 重定向：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">RedirectWithStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> status <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Route\n      render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> staticContext <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// there is no `staticContext` on the client, so</span>\n        <span class=\"token comment\">// we need to guard against that here</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>staticContext<span class=\"token punctuation\">)</span> staticContext<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> status\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Redirect <span class=\"token keyword\">from</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">}</span> to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>to<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// somewhere in your app</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token comment\">/* some other routes */</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>RedirectWithStatus status<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">301</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span><span class=\"token operator\">=</span><span class=\"token string\">\"/users\"</span> to<span class=\"token operator\">=</span><span class=\"token string\">\"/profiles\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>RedirectWithStatus status<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">302</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span><span class=\"token operator\">=</span><span class=\"token string\">\"/courses\"</span> to<span class=\"token operator\">=</span><span class=\"token string\">\"/dashboard\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// on the server</span>\n<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> markup <span class=\"token operator\">=</span> ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>StaticRouter context<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StaticRouter<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// can use the `context.status` that</span>\n  <span class=\"token comment\">// we added in RedirectWithStatus</span>\n  <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"404-401-或其他状态\" style=\"position:relative;\"><a href=\"#404-401-%E6%88%96%E5%85%B6%E4%BB%96%E7%8A%B6%E6%80%81\" aria-label=\"404 401 或其他状态 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>404, 401 或其他状态</h4>\n<p>我们可以做与上述相同的事情。创建一个添加 context 的组件，并将其呈现在 web 应用中的任何位置以获取不同的状态代码。\n现在，你可以在应用的任意位置渲染 Status 来改变 context 的值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> code<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Route\n      render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> staticContext <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>staticContext<span class=\"token punctuation\">)</span> staticContext<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Status code<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">404</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Sorry<span class=\"token punctuation\">,</span> can’t find that<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Status<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>About<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/dashboard\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Dashboard<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>NotFound<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"整合起来\" style=\"position:relative;\"><a href=\"#%E6%95%B4%E5%90%88%E8%B5%B7%E6%9D%A5\" aria-label=\"整合起来 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>整合起来</h4>\n<p>上面示例并不是一个完整的应用，但他已经包含了你构建一个服务端渲染应用的基本部分。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 服务端</span>\n<span class=\"token keyword\">import</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'http'</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOMServer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/server'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StaticRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.js'</span>\n\nhttp\n  <span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>StaticRouter location<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span> context<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StaticRouter<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">301</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        Location<span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span>url\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;!doctype html>\n      &lt;div id=\"app\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>html<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/div>\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//客户端</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.js'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>BrowserRouter<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BrowserRouter<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"加载数据\" style=\"position:relative;\"><a href=\"#%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE\" aria-label=\"加载数据 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>加载数据</h4>\n<p>数据加载的方式有很多很多种，而社区目前也没有提炼出最佳实践，所以我们力求解决方案能和任何方式共同工作，而不是倾向并绑定一种解决方案。</p>\n<p>主要限制是您要在渲染之前加载数据。React Router 导出 matchPath 其内部使用的静态功能，以将位置与路线匹配。您可以在服务器上使用此功能来帮助确定呈现之前的数据依存关系。</p>\n<p>这种方法的要旨是依赖于静态路由配置，该配置既可以呈现您的路由，也可以在呈现之前进行匹配以确定数据依赖。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> Root<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">loadData</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getSomeData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// etc.</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`</code></pre></div>\n<p>接着用这个配置项渲染你的<code class=\"language-text\">&lt;Route&gt;</code>组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> routes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes.js'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>routes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Route <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>route<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在服务端，你会有类似于此的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> matchPath <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span>\n\n<span class=\"token comment\">// inside a request</span>\n<span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 使用 some 方法来确保仅匹配第一项找到的路由</span>\nroutes<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// use `matchPath` here</span>\n  <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> <span class=\"token function\">matchPath</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> route<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span> promises<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> match\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 操作数据以便客户端能够访问他并根据其渲染页面</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>最后，客户将需要提取数据。同样，我们不为您的应用程序规定数据加载模式，但是这些是您需要去手动实现的。您可能对我们的 <a href=\"https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Router Config</a> 包感兴趣，以通过静态路由配置帮助数据加载和服务器渲染。</p>","timeToRead":5},"allMarkdownRemark":{"totalCount":23,"edges":[{"node":{"frontmatter":{"title":"快速开始"},"fields":{"slug":"/docs/react-router-dom/向导/快速开始"}}},{"node":{"frontmatter":{"title":"核心组件"},"fields":{"slug":"/docs/react-router-dom/向导/核心组件"}}},{"node":{"frontmatter":{"title":"服务端渲染"},"fields":{"slug":"/docs/react-router-dom/向导/服务端渲染"}}},{"node":{"frontmatter":{"title":"代码分割"},"fields":{"slug":"/docs/react-router-dom/向导/代码分割"}}},{"node":{"frontmatter":{"title":"滚动回溯"},"fields":{"slug":"/docs/react-router-dom/向导/滚动回溯"}}},{"node":{"frontmatter":{"title":"代码哲学"},"fields":{"slug":"/docs/react-router-dom/向导/代码哲学"}}},{"node":{"frontmatter":{"title":"测试"},"fields":{"slug":"/docs/react-router-dom/向导/测试"}}},{"node":{"frontmatter":{"title":"深度redux整合"},"fields":{"slug":"/docs/react-router-dom/向导/深度redux整合"}}},{"node":{"frontmatter":{"title":"静态路由"},"fields":{"slug":"/docs/react-router-dom/向导/静态路由"}}},{"node":{"frontmatter":{"title":"基础"},"fields":{"slug":"/docs/react-router-dom/示例/基础"}}},{"node":{"frontmatter":{"title":"配置 URL 参数"},"fields":{"slug":"/docs/react-router-dom/示例/配置-url-参数"}}},{"node":{"frontmatter":{"title":"嵌套路由"},"fields":{"slug":"/docs/react-router-dom/示例/嵌套路由"}}},{"node":{"frontmatter":{"title":"重定向（鉴权）"},"fields":{"slug":"/docs/react-router-dom/示例/重定向（鉴权）"}}},{"node":{"frontmatter":{"title":"自定义 Link"},"fields":{"slug":"/docs/react-router-dom/示例/自定义-link"}}},{"node":{"frontmatter":{"title":"防止过渡动画"},"fields":{"slug":"/docs/react-router-dom/示例/防止过渡动画"}}},{"node":{"frontmatter":{"title":"404 页面"},"fields":{"slug":"/docs/react-router-dom/示例/404-页面"}}},{"node":{"frontmatter":{"title":"侧边栏"},"fields":{"slug":"/docs/react-router-dom/示例/侧边栏"}}},{"node":{"frontmatter":{"title":"动画过渡"},"fields":{"slug":"/docs/react-router-dom/示例/动画过渡"}}},{"node":{"frontmatter":{"title":"路由配置"},"fields":{"slug":"/docs/react-router-dom/示例/路由配置"}}},{"node":{"frontmatter":{"title":"弹窗路由（Modal）"},"fields":{"slug":"/docs/react-router-dom/示例/弹窗路由（-modal）"}}},{"node":{"frontmatter":{"title":"StaticRouter 上下文"},"fields":{"slug":"/docs/react-router-dom/示例/static-router-上下文"}}},{"node":{"frontmatter":{"title":"递归路径"},"fields":{"slug":"/docs/react-router-dom/示例/递归路径"}}},{"node":{"frontmatter":{"title":"页面查询参数"},"fields":{"slug":"/docs/react-router-dom/示例/页面查询参数"}}}]}},"pageContext":{"slug":"/docs/react-router-dom/向导/服务端渲染","prev":{"fileAbsolutePath":"/Users/owenwang/Documents/javascript/serializedowen.github.io/blog/react-router-dom/向导/测试.md","fields":{"slug":"/docs/react-router-dom/向导/测试"},"frontmatter":{"title":"测试","category":"docs","nested":"nested"}},"next":{"fileAbsolutePath":"/Users/owenwang/Documents/javascript/serializedowen.github.io/blog/react-router-dom/向导/代码哲学.md","fields":{"slug":"/docs/react-router-dom/向导/代码哲学"},"frontmatter":{"title":"代码哲学","category":"docs","nested":"nested"}},"layout":"docs"}},"staticQueryHashes":["3969440572","3969440572"]}