{"componentChunkName":"component---src-templates-doc-js","path":"/docs/react-router-dom/向导/设计理念","result":{"data":{"markdownRemark":{"html":"<h3 id=\"设计理念\" style=\"position:relative;\"><a href=\"#%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5\" aria-label=\"设计理念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>设计理念</h3>\n<p>本指南的目的是解释使用 React Router 时要具有的思维模型。我们称之为“动态路由”，它与您可能更熟悉的“静态路由”完全不同。</p>\n<h4 id=\"静态路由\" style=\"position:relative;\"><a href=\"#%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1\" aria-label=\"静态路由 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>静态路由</h4>\n<p>如果您使用过 Rails，Express，Ember，Angular 等，则使用了静态路由。在这些框架中，您将在进行任何渲染之前的应用程序初始化过程中声明路由。React Router &#x3C; v4 也是静态的（大部分是静态的）。让我们看一下如何在 express 中配置路由：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Express Style routing:</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> handleIndex<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/invoices'</span><span class=\"token punctuation\">,</span> handleInvoices<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/invoices/:id'</span><span class=\"token punctuation\">,</span> handleInvoice<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/invoices/:id/edit'</span><span class=\"token punctuation\">,</span> handleInvoiceEdit<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>请注意在应用监听之前如何声明路由。我们使用的客户端路由器是相似的。在 Angular 中，您先声明路由，然后 AppModule 在渲染之前将其导入顶层：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Angular Style routing:</span>\n<span class=\"token keyword\">const</span> appRoutes<span class=\"token operator\">:</span> Routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'crisis-center'</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> CrisisListComponent\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'hero/:id'</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> HeroDetailComponent\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'heroes'</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> HeroListComponent<span class=\"token punctuation\">,</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Heroes List'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    redirectTo<span class=\"token operator\">:</span> <span class=\"token string\">'/heroes'</span><span class=\"token punctuation\">,</span>\n    pathMatch<span class=\"token operator\">:</span> <span class=\"token string\">'full'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'**'</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> PageNotFoundComponent\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>RouterModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span>appRoutes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ember 具有一个常规 routes.js 文件，该文件会为您读取并导入到应用程序中。同样，这是在您的应用渲染之前发生的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Ember Style Router:</span>\nRouter<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'about'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'contact'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rentals'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/:rental_id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Router</code></pre></div>\n<p>尽管 API 不同，但它们都共享“静态路由”模型。React Router 也跟进了直到 v4。为了成功使用 React Router，您需要忘记所有这些！：O</p>\n<h4 id=\"背景故事\" style=\"position:relative;\"><a href=\"#%E8%83%8C%E6%99%AF%E6%95%85%E4%BA%8B\" aria-label=\"背景故事 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>背景故事</h4>\n<p>坦率地说，React Router v2 中采取的方向感到非常沮丧。我们（Michael 和 Ryan）感到受到 API 的限制，认识到我们正在重新实现 React 的各个部分（生命周期等），而这与 React 为构建 UI 提供的思维模型不匹配。</p>\n<p>我们正讨论该如何处理的工作的时候穿过酒店的走廊。我们互相问：“如果使用我们在讲习班中教学的模式建造路由器，那会是什么样？”</p>\n<p>仅仅几个小时的开发时间，我们就获得了概念证明 PoC，我们知道这是我们希望的 react 路由的未来。我们最终得到的 API 并不是 React 之外的“ API”，它是由 React 的其余部分组成或自然地融入其中的。我们认为您会喜欢它的！</p>\n<h4 id=\"动态路由\" style=\"position:relative;\"><a href=\"#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1\" aria-label=\"动态路由 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>动态路由</h4>\n<p>当我们说动态路由，是指在您的应用渲染时发生的路由跳转，而不是在运行的应用之外的配置或约定中进行。这意味着几乎所有内容都是 React Router 中的一个组件。这是对该 API 的 60 秒回顾，以了解其工作原理：</p>\n<p>首先，为你的开发环境选择一个 Router 组件，并在 react 应用的顶层渲染：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// react-native</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NativeRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-native'</span>\n\n<span class=\"token comment\">// react-dom (what we'll use here)</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>BrowserRouter<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BrowserRouter<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  el\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>接下来，获取<code class=\"language-text\">&lt;Link&gt;</code>组件以链接到新位置:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>nav<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/dashboard\"</span><span class=\"token operator\">></span>Dashboard<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>nav<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>最后，渲染一个 Route 以在用户访问时显示一些 UI /dashboard:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>nav<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/dashboard\"</span><span class=\"token operator\">></span>Dashboard<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>nav<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/dashboard\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Dashboard<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>该 Route 将使<code class=\"language-text\">&lt;Dashboard {...props}/&gt;</code>其中 props 包含一些 react-router 的具体属性，包括<code class=\"language-text\">{ match, location, history }</code>。如果用户没有在/dashboard 路径上， 那么 Route 将呈现 null。这几乎就是它的全部逻辑。</p>\n<h4 id=\"嵌套路由\" style=\"position:relative;\"><a href=\"#%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1\" aria-label=\"嵌套路由 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>嵌套路由</h4>\n<p>许多路由器都有“嵌套路由”的概念。如果您使用过 v4 之前的 React Router 版本，您也会知道它也是如此！当您从静态路由配置转换为动态渲染的路由时，如何“嵌套路由”？好吧，您如何嵌套一个 div？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>BrowserRouter<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/tacos\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Tacos<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BrowserRouter<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// when the url matches `/tacos` this component renders</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Tacos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> match <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">//这是一个嵌套路由</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token comment\">/* 这是一个嵌套路由\n        match.url 帮助我们定义相对路径 */</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>match<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+</span> <span class=\"token string\">'/carnitas'</span><span class=\"token punctuation\">}</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Carnitas<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>你会发现我们在没有嵌套 API 的情况下完成了嵌套路由的操作。Route 只是一个组件，就像 div。因此，要嵌套 Route 或 div，您只需…做就可以了。</p>\n<p>让我们看看更加复杂的例子。</p>\n<h4 id=\"响应式路由\" style=\"position:relative;\"><a href=\"#%E5%93%8D%E5%BA%94%E5%BC%8F%E8%B7%AF%E7%94%B1\" aria-label=\"响应式路由 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>响应式路由</h4>\n<p>考虑用户导航到/invoices。您的 web 应用要适应不同的屏幕尺寸。</p>\n<ol>\n<li>对于视口狭窄的小屏幕，因只向他们显示发票清单和发票仪表板的链接。他们可以从那里更深入地导航。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Small Screen\nurl: /invoices\n\n+----------------------+\n|                      |\n|      Dashboard       |\n|                      |\n+----------------------+\n|                      |\n|      Invoice 01      |\n|                      |\n+----------------------+\n|                      |\n|      Invoice 02      |\n|                      |\n+----------------------+\n|                      |\n|      Invoice 03      |\n|                      |\n+----------------------+\n|                      |\n|      Invoice 04      |\n|                      |\n+----------------------+</code></pre></div>\n<ol start=\"2\">\n<li>在较大的屏幕上，我们想显示一个主从视图，其中导航在左侧，仪表板或特定发票在右侧。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Large Screen\nurl: /invoices/dashboard\n\n+----------------------+---------------------------+\n|                      |                           |\n|      Dashboard       |                           |\n|                      |   Unpaid:             5   |\n+----------------------+                           |\n|                      |   Balance:   $53,543.00   |\n|      Invoice 01      |                           |\n|                      |   Past Due:           2   |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 02      |                           |\n|                      |   +-------------------+   |\n+----------------------+   |                   |   |\n|                      |   |  +    +     +     |   |\n|      Invoice 03      |   |  | +  |     |     |   |\n|                      |   |  | |  |  +  |  +  |   |\n+----------------------+   |  | |  |  |  |  |  |   |\n|                      |   +--+-+--+--+--+--+--+   |\n|      Invoice 04      |                           |\n|                      |                           |\n+----------------------+---------------------------+</code></pre></div>\n<p>现在暂停一分钟，考虑/invoices 两种屏幕尺寸的网址。它甚至是大屏幕的有效路由吗？我们应该在右边放什么？</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Large Screen\nurl: /invoices\n+----------------------+---------------------------+\n|                      |                           |\n|      Dashboard       |                           |\n|                      |                           |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 01      |                           |\n|                      |                           |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 02      |             ???           |\n|                      |                           |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 03      |                           |\n|                      |                           |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 04      |                           |\n|                      |                           |\n+----------------------+---------------------------+</code></pre></div>\n<p>在大屏幕上，/invoices 不是有效路由，但在小屏幕上，则是有效路由！为了使事情变得更有趣，请考虑使用大型手机的人。他们可能/invoices 以纵向观看，然后将手机旋转为横向。突然，我们有足够的空间来显示主从界面，因此您应该立即进行重定向！React Router 先前版本的静态路由并没有真正解决这个问题的方法。但是，当路由是动态的时，您可以声明性地组合此功能。如果您开始考虑将路由选择为 UI，而不是静态配置，那么您的直觉将引导您进入以下代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>AppLayout<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/invoices\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Invoices<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>AppLayout<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Invoices</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Layout<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token comment\">/* always show the nav */</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>InvoicesNav <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>Media query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">PRETTY_SMALL</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token parameter\">screenIsSmall</span> <span class=\"token operator\">=></span>\n        screenIsSmall <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token comment\">// small screen has no redirect</span>\n          <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/invoices/dashboard\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Dashboard<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/invoices/:id\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Invoice<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token comment\">// large screen does!</span>\n          <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/invoices/dashboard\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Dashboard<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/invoices/:id\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Invoice<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Redirect <span class=\"token keyword\">from</span><span class=\"token operator\">=</span><span class=\"token string\">\"/invoices\"</span> to<span class=\"token operator\">=</span><span class=\"token string\">\"/invoices/dashboard\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Media<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>当用户将手机从纵向旋转到横向时，此代码将自动将其重定向到仪表板。有效路由的集合根据用户手中的移动设备的动态性质而改变。这只是一个例子。我们可以讨论许多其他问题，但我们将总结以下建议：为了使您的直觉与 React Router 的直觉保持一致，请考虑组件而不是静态路由。考虑一下如何使用 React 的声明式可组合性解决问题，因为几乎每个“ React Router 问题”都可能是“ React 问题”。</p>","timeToRead":6,"frontmatter":{"title":"设计理念"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"/docs/react-router-dom/%E5%90%91%E5%AF%BC/%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/#%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5\">设计理念</a></p>\n<ul>\n<li><a href=\"/docs/react-router-dom/%E5%90%91%E5%AF%BC/%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/#%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1\">静态路由</a></li>\n<li><a href=\"/docs/react-router-dom/%E5%90%91%E5%AF%BC/%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/#%E8%83%8C%E6%99%AF%E6%95%85%E4%BA%8B\">背景故事</a></li>\n<li><a href=\"/docs/react-router-dom/%E5%90%91%E5%AF%BC/%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1\">动态路由</a></li>\n<li><a href=\"/docs/react-router-dom/%E5%90%91%E5%AF%BC/%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/#%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1\">嵌套路由</a></li>\n<li><a href=\"/docs/react-router-dom/%E5%90%91%E5%AF%BC/%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/#%E5%93%8D%E5%BA%94%E5%BC%8F%E8%B7%AF%E7%94%B1\">响应式路由</a></li>\n</ul>\n</li>\n</ul>","lastModified":"2020-10-09T04:07:27.707Z","headings":[{"id":"设计理念","depth":3},{"id":"静态路由","depth":4},{"id":"背景故事","depth":4},{"id":"动态路由","depth":4},{"id":"嵌套路由","depth":4},{"id":"响应式路由","depth":4}]},"allMarkdownRemark":{"totalCount":41,"edges":[{"node":{"frontmatter":{"title":"快速开始"},"fields":{"slug":"/docs/react-router-dom/向导/快速开始"}}},{"node":{"frontmatter":{"title":"核心组件"},"fields":{"slug":"/docs/react-router-dom/向导/核心组件"}}},{"node":{"frontmatter":{"title":"服务端渲染"},"fields":{"slug":"/docs/react-router-dom/向导/服务端渲染"}}},{"node":{"frontmatter":{"title":"代码分割"},"fields":{"slug":"/docs/react-router-dom/向导/代码分割"}}},{"node":{"frontmatter":{"title":"滚动回溯"},"fields":{"slug":"/docs/react-router-dom/向导/滚动回溯"}}},{"node":{"frontmatter":{"title":"设计理念"},"fields":{"slug":"/docs/react-router-dom/向导/设计理念"}}},{"node":{"frontmatter":{"title":"测试"},"fields":{"slug":"/docs/react-router-dom/向导/测试"}}},{"node":{"frontmatter":{"title":"深度redux整合"},"fields":{"slug":"/docs/react-router-dom/向导/深度redux整合"}}},{"node":{"frontmatter":{"title":"静态路由"},"fields":{"slug":"/docs/react-router-dom/向导/静态路由"}}},{"node":{"frontmatter":{"title":""},"fields":{"slug":"/docs/react-router-dom/"}}},{"node":{"frontmatter":{"title":"基础"},"fields":{"slug":"/docs/react-router-dom/示例/基础"}}},{"node":{"frontmatter":{"title":"配置 URL 参数"},"fields":{"slug":"/docs/react-router-dom/示例/配置-url-参数"}}},{"node":{"frontmatter":{"title":"嵌套路由"},"fields":{"slug":"/docs/react-router-dom/示例/嵌套路由"}}},{"node":{"frontmatter":{"title":"重定向（鉴权）"},"fields":{"slug":"/docs/react-router-dom/示例/重定向（鉴权）"}}},{"node":{"frontmatter":{"title":"自定义 Link"},"fields":{"slug":"/docs/react-router-dom/示例/自定义-link"}}},{"node":{"frontmatter":{"title":"防止过渡动画"},"fields":{"slug":"/docs/react-router-dom/示例/防止过渡动画"}}},{"node":{"frontmatter":{"title":"404 页面"},"fields":{"slug":"/docs/react-router-dom/示例/404-页面"}}},{"node":{"frontmatter":{"title":"侧边栏"},"fields":{"slug":"/docs/react-router-dom/示例/侧边栏"}}},{"node":{"frontmatter":{"title":"动画过渡"},"fields":{"slug":"/docs/react-router-dom/示例/动画过渡"}}},{"node":{"frontmatter":{"title":"路由配置"},"fields":{"slug":"/docs/react-router-dom/示例/路由配置"}}},{"node":{"frontmatter":{"title":"弹窗路由（Modal）"},"fields":{"slug":"/docs/react-router-dom/示例/弹窗路由（-modal）"}}},{"node":{"frontmatter":{"title":"StaticRouter 上下文"},"fields":{"slug":"/docs/react-router-dom/示例/static-router-上下文"}}},{"node":{"frontmatter":{"title":"递归路径"},"fields":{"slug":"/docs/react-router-dom/示例/递归路径"}}},{"node":{"frontmatter":{"title":"页面查询参数"},"fields":{"slug":"/docs/react-router-dom/示例/页面查询参数"}}},{"node":{"frontmatter":{"title":"Hooks"},"fields":{"slug":"/docs/react-router-dom/API/hooks"}}},{"node":{"frontmatter":{"title":"<BrowserRouter>"},"fields":{"slug":"/docs/react-router-dom/API/browser-router"}}},{"node":{"frontmatter":{"title":"<HashRouter>"},"fields":{"slug":"/docs/react-router-dom/API/hash-router"}}},{"node":{"frontmatter":{"title":"<Link>"},"fields":{"slug":"/docs/react-router-dom/API/link"}}},{"node":{"frontmatter":{"title":"<NavLink>"},"fields":{"slug":"/docs/react-router-dom/API/nav-link"}}},{"node":{"frontmatter":{"title":"<Prompt>"},"fields":{"slug":"/docs/react-router-dom/API/prompt"}}},{"node":{"frontmatter":{"title":"<Redirect>"},"fields":{"slug":"/docs/react-router-dom/API/redirect"}}},{"node":{"frontmatter":{"title":"<MemoryRouter>"},"fields":{"slug":"/docs/react-router-dom/API/memory-router"}}},{"node":{"frontmatter":{"title":"<Route>"},"fields":{"slug":"/docs/react-router-dom/API/route"}}},{"node":{"frontmatter":{"title":"<StaticRouter>"},"fields":{"slug":"/docs/react-router-dom/API/static-router"}}},{"node":{"frontmatter":{"title":"<Router>"},"fields":{"slug":"/docs/react-router-dom/API/router"}}},{"node":{"frontmatter":{"title":"<Switch>"},"fields":{"slug":"/docs/react-router-dom/API/switch"}}},{"node":{"frontmatter":{"title":"history"},"fields":{"slug":"/docs/react-router-dom/API/history"}}},{"node":{"frontmatter":{"title":"location"},"fields":{"slug":"/docs/react-router-dom/API/location"}}},{"node":{"frontmatter":{"title":"match"},"fields":{"slug":"/docs/react-router-dom/API/match"}}},{"node":{"frontmatter":{"title":"matchPath"},"fields":{"slug":"/docs/react-router-dom/API/match-path"}}},{"node":{"frontmatter":{"title":"withRouter"},"fields":{"slug":"/docs/react-router-dom/API/with-router"}}}]}},"pageContext":{"package":"react-router-dom","slug":"/docs/react-router-dom/向导/设计理念","prev":{"node":{"fileAbsolutePath":"/Users/owenwang/Documents/javascript/serializedowen.github.io/docs/react-router-dom/向导/滚动回溯.md","sourceType":"docs","fields":{"package":"react-router-dom","slug":"/docs/react-router-dom/向导/滚动回溯"},"frontmatter":{"title":"滚动回溯","category":"docs"}}},"next":{"node":{"fileAbsolutePath":"/Users/owenwang/Documents/javascript/serializedowen.github.io/docs/react-router-dom/向导/测试.md","sourceType":"docs","fields":{"package":"react-router-dom","slug":"/docs/react-router-dom/向导/测试"},"frontmatter":{"title":"测试","category":"docs"}}},"layout":"docs"}},"staticQueryHashes":["1124436713","4274079806"]}