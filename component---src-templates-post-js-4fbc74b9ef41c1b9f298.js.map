{"version":3,"sources":["webpack:///./src/templates/post.js"],"names":["func","Title","styled","h1","PostContent","div","Post","props","state","progress","componentDidMount","MediumEditor","require","this","editor","elementsContainer","document","querySelector","setTimeout","height","body","clientHeight","innerHeight","window","console","log","setState","Number","scrollY","addEventListener","componentWillUnmount","removeEventListener","render","pageContext","slug","prev","next","postNode","data","markdownRemark","post","frontmatter","postPath","postSEO","title","config","siteTitle","to","id","date","timeToRead","kebabCase","category","className","dangerouslySetInnerHTML","__html","html","Component","defaultProps","PropTypes","shape","postQuery"],"mappings":"qMA8BIA,E,yJATEC,G,oBAAQC,IAAOC,GAAV,8DAAGD,CAAH,0BAILE,EAAcF,IAAOG,IAAV,oEAAGH,CAAH,mCAOXI,E,YACJ,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,CAAEC,SAAU,GAFR,E,4CAKnBC,kBAAA,WAAqB,IAAD,OAGZC,EAAeC,EAAQ,QAC7BC,KAAKC,OAAS,IAAIH,EAAa,YAAa,CAC1CI,kBAAmBC,SAASC,cAAc,qBAG5CC,YAAW,WACT,IAAMC,EAASH,SAASI,KAAKC,aACrBC,EAAgBC,OAAhBD,YAERE,QAAQC,IAAIN,EAAQG,GACpBtB,EAAO,WACL,EAAK0B,SAAS,CACZjB,SAAUkB,OAAyB,IAAjBJ,OAAOK,SAAkBT,EAASG,OAGxDC,OAAOM,iBAAiB,SAAU7B,KACjC,M,EAGL8B,qBAAA,WACEjB,KAAKC,OAAS,KACdd,GAAQuB,OAAOQ,oBAAoB,SAAU/B,I,EAG/CgC,OAAA,WAAU,IAAD,EAIHnB,KAAKN,MAJF,IAEL0B,YAAeC,EAFV,EAEUA,KAAMC,EAFhB,EAEgBA,KAAMC,EAFtB,EAEsBA,KACHC,EAHnB,EAGLC,KAAQC,eAGF9B,EAAaI,KAAKL,MAAlBC,SACF+B,EAAOH,EAASI,YACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAahC,SAAUA,IACvB,kBAAC,IAAD,CAAKiC,SAAUR,EAAMG,SAAUA,EAAUM,SAAO,IAChD,kBAAC,IAAD,CAAQC,MAAUJ,EAAKI,MAAV,MAAqBC,IAAOC,YACzC,kBAAC,IAAD,KACE,kBAAC,OAAD,CAAMC,GAAG,KAAKF,IAAOC,YAEvB,kBAAC,IAAD,KACE,kBAAC7C,EAAD,KAAQuC,EAAKI,OACb,yBAAKI,GAAG,mBACR,kBAAC,IAAD,KACGR,EAAKS,KADR,MACuBZ,EAASa,WADhC,iBACgE,IAC9D,kBAAC,OAAD,CAAMH,GAAE,eAAiBI,IAAUX,EAAKY,WACrCZ,EAAKY,WAGV,kBAAChD,EAAD,CACEiD,UAAU,WACVC,wBAAyB,CAAEC,OAAQlB,EAASmB,QAE9C,kBAAC,IAAD,CAAUrB,KAAMA,EAAMC,KAAMA,O,GA9DnBqB,aAqEJnD,YAafA,EAAKoD,aAAe,CAClBzB,YAAa0B,IAAUC,MAAM,CAC3BxB,KAAM,KACND,KAAM,QAIH,IAAM0B,EAAS","file":"component---src-templates-post-js-4fbc74b9ef41c1b9f298.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { Link, graphql } from 'gatsby'\nimport styled from 'styled-components'\nimport kebabCase from 'lodash/kebabCase'\nimport {\n  ProgressBar,\n  Wrapper,\n  Header,\n  Subline,\n  SEO,\n  PrevNext,\n  Content\n} from 'components'\nimport config from '../../config/SiteConfig'\nimport '../utils/medium-editor.css'\nimport 'medium-editor/dist/css/medium-editor.min.css'\n\n// import '../utils/prismjs-theme.css'\n\nconst Title = styled.h1`\n  margin-bottom: 1rem;\n`\n\nconst PostContent = styled.div`\n  outline: none;\n  margin-top: 4rem;\n`\n\nlet func\n\nclass Post extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { progress: 0 }\n  }\n\n  componentDidMount() {\n    // using import cause failure at production build\n    /* eslint global-require:0 */\n    const MediumEditor = require('medium-editor')\n    this.editor = new MediumEditor('.editable', {\n      elementsContainer: document.querySelector('#medium-toolbar')\n    })\n\n    setTimeout(() => {\n      const height = document.body.clientHeight\n      const { innerHeight } = window\n\n      console.log(height, innerHeight)\n      func = () => {\n        this.setState({\n          progress: Number((window.scrollY * 100) / (height - innerHeight))\n        })\n      }\n      window.addEventListener('scroll', func)\n    }, 500)\n  }\n\n  componentWillUnmount() {\n    this.editor = null\n    func && window.removeEventListener('scroll', func)\n  }\n\n  render() {\n    const {\n      pageContext: { slug, prev, next },\n      data: { markdownRemark: postNode }\n    } = this.props\n\n    const { progress } = this.state\n    const post = postNode.frontmatter\n    return (\n      <Wrapper>\n        <ProgressBar progress={progress}></ProgressBar>\n        <SEO postPath={slug} postNode={postNode} postSEO />\n        <Helmet title={`${post.title} | ${config.siteTitle}`} />\n        <Header>\n          <Link to=\"/\">{config.siteTitle}</Link>\n        </Header>\n        <Content>\n          <Title>{post.title}</Title>\n          <div id=\"medium-toolbar\" />\n          <Subline>\n            {post.date} &mdash; {postNode.timeToRead} Min Read &mdash; In{' '}\n            <Link to={`/categories/${kebabCase(post.category)}`}>\n              {post.category}\n            </Link>\n          </Subline>\n          <PostContent\n            className=\"editable\"\n            dangerouslySetInnerHTML={{ __html: postNode.html }}\n          />\n          <PrevNext prev={prev} next={next} />\n        </Content>\n      </Wrapper>\n    )\n  }\n}\n\nexport default Post\n\nPost.propTypes = {\n  pageContext: PropTypes.shape({\n    slug: PropTypes.string.isRequired,\n    next: PropTypes.object,\n    prev: PropTypes.object\n  }),\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.object.isRequired\n  }).isRequired\n}\n\nPost.defaultProps = {\n  pageContext: PropTypes.shape({\n    next: null,\n    prev: null\n  })\n}\n\nexport const postQuery = graphql`\n  query postBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      excerpt\n      frontmatter {\n        title\n        date(formatString: \"DD.MM.YYYY\")\n        category\n      }\n      timeToRead\n    }\n  }\n`\n"],"sourceRoot":""}